use super::Opcode;
use super::Opcode::*;
use super::opcode::Reg16::*;
use super::opcode::Reg8::*;
use super::opcode::JF;
use super::opcode::Addr;
use super::opcode::Operand8::*;
use dmg::Interconnect;

pub struct Instruction {
    opcode: Opcode,
    bytes: u8,
    cycles: u8
}

impl Instruction {
    pub fn fetch(pc: u16, interconnect: &mut Interconnect) -> Instruction {
        let opcode = interconnect.read_byte(pc);
        let imm16 = (interconnect.read_byte(pc + 2) as u16) << 8
            | interconnect.read_byte(pc + 1) as u16;
        let (bytes, cycles, op) = decode(opcode, imm16);
        Instruction {
            opcode: op,
            bytes: bytes,
            cycles: cycles
        }
    }

    pub fn opcode(&self) -> Opcode {
        self.opcode
    }

    pub fn bytes(&self) -> u8 {
        self.bytes
    }

    pub fn cycles(&self) -> u8 {
        self.cycles
    }
}

fn decode(op: u8, imm16: u16) -> (u8, u8, Opcode) {
    let d8 = imm16 as u8;
    let r8 = d8 as i8;
    match op {
        // (bytes, cycles, Opcode)
        0x00 => (1, 1, Nop),
        0x01 => (3, 3, Ld16(BC, imm16)),
        0x02 => (1, 2, Ld(Mem(Addr::BC), Reg(A))),
        0x03 => (1, 2, Inc16(BC)),
        0x04 => (1, 1, Inc(Reg(B))),
        0x05 => (1, 1, Dec(Reg(B))),
        0x06 => (2, 2, Ld(Reg(B), Imm(d8))),
        0x07 => (1, 1, Rlca),

        0x08 => (3, 5, LdnnSp(imm16)),
        0x09 => (1, 2, AddHl(BC)),
        0x0a => (1, 2, Ld(Reg(A), Mem(Addr::BC))),
        0x0b => (1, 2, Dec16(BC)),
        0x0c => (1, 1, Inc(Reg(C))),
        0x0d => (1, 1, Dec(Reg(C))),
        0x0e => (2, 2, Ld(Reg(C), Imm(d8))),
        0x0f => (1, 1, Rrca),

        0x10 => (1, 1, Stop),
        0x11 => (3, 3, Ld16(DE, imm16)),
        0x12 => (1, 2, Ld(Mem(Addr::DE), Reg(A))),
        0x13 => (1, 2, Inc16(DE)),
        0x14 => (1, 1, Inc(Reg(D))),
        0x15 => (1, 1, Dec(Reg(D))),
        0x16 => (2, 2, Ld(Reg(D), Imm(d8))),
        0x17 => (1, 1, Rla),

        0x18 => (2, 3, Jr(JF::Always, r8)),
        0x19 => (1, 2, AddHl(DE)),
        0x1a => (1, 2, Ld(Reg(A), Mem(Addr::DE))),
        0x1b => (1, 2, Dec16(DE)),
        0x1c => (1, 1, Inc(Reg(C))),
        0x1d => (1, 1, Dec(Reg(C))),
        0x1e => (2, 2, Ld(Reg(E), Imm(d8))),
        0x1f => (1, 1, Rra),

        0x20 => (2, 3, Jr(JF::NZ, r8)),
        0x21 => (3, 3, Ld16(HL, imm16)),
        0x22 => (1, 2, Ld(Mem(Addr::HLI), Reg(A))),
        0x23 => (1, 2, Inc16(HL)),
        0x24 => (1, 1, Inc(Reg(H))),
        0x25 => (1, 1, Dec(Reg(H))),
        0x26 => (2, 2, Ld(Reg(H), Imm(d8))),
        0x27 => (1, 1, Daa),

        0x28 => (2, 3, Jr(JF::Z, r8)),
        0x29 => (1, 2, AddHl(HL)),
        0x2a => (1, 2, Ld(Reg(A), Mem(Addr::HLI))),
        0x2b => (1, 2, Dec16(HL)),
        0x2c => (1, 1, Inc(Reg(L))),
        0x2d => (1, 1, Dec(Reg(L))),
        0x2e => (2, 2, Ld(Reg(L), Imm(d8))),
        0x2f => (1, 1, Cpl),

        0x30 => (2, 3, Jr(JF::NC, r8)),
        0x31 => (3, 3, Ld16(SP, imm16)),
        0x32 => (1, 2, Ld(Mem(Addr::HLD), Reg(A))),
        0x33 => (1, 2, Inc16(SP)),
        0x34 => (1, 3, Inc(Mem(Addr::HL))),
        0x35 => (1, 3, Dec(Mem(Addr::HL))),
        0x36 => (2, 3, Ld(Mem(Addr::HL), Imm(d8))),
        0x37 => (1, 1, Scf),

        0x38 => (2, 3, Jr(JF::C, r8)),
        0x39 => (1, 2, AddHl(SP)),
        0x3a => (1, 2, Ld(Reg(A), Mem(Addr::HLD))),
        0x3b => (1, 2, Dec16(SP)),
        0x3c => (1, 3, Inc(Reg(A))),
        0x3d => (1, 3, Dec(Reg(A))),
        0x3e => (2, 2, Ld(Reg(A), Imm(d8))),
        0x3f => (1, 1, Ccf),

        0x40 => (1, 1, Ld(Reg(B), Reg(B))),
        0x41 => (1, 1, Ld(Reg(B), Reg(C))),
        0x42 => (1, 1, Ld(Reg(B), Reg(D))),
        0x43 => (1, 1, Ld(Reg(B), Reg(E))),
        0x44 => (1, 1, Ld(Reg(B), Reg(H))),
        0x45 => (1, 1, Ld(Reg(B), Reg(L))),
        0x46 => (1, 2, Ld(Reg(B), Mem(Addr::HL))),
        0x47 => (1, 1, Ld(Reg(B), Reg(A))),

        0x48 => (1, 1, Ld(Reg(C), Reg(B))),
        0x49 => (1, 1, Ld(Reg(C), Reg(C))),
        0x4a => (1, 1, Ld(Reg(C), Reg(D))),
        0x4b => (1, 1, Ld(Reg(C), Reg(E))),
        0x4c => (1, 1, Ld(Reg(C), Reg(H))),
        0x4d => (1, 1, Ld(Reg(C), Reg(L))),
        0x4e => (1, 2, Ld(Reg(C), Mem(Addr::HL))),
        0x4f => (1, 1, Ld(Reg(C), Reg(A))),

        0x50 => (1, 1, Ld(Reg(D), Reg(B))),
        0x51 => (1, 1, Ld(Reg(D), Reg(C))),
        0x52 => (1, 1, Ld(Reg(D), Reg(D))),
        0x53 => (1, 1, Ld(Reg(D), Reg(E))),
        0x54 => (1, 1, Ld(Reg(D), Reg(H))),
        0x55 => (1, 1, Ld(Reg(D), Reg(L))),
        0x56 => (1, 2, Ld(Reg(D), Mem(Addr::HL))),
        0x57 => (1, 1, Ld(Reg(D), Reg(A))),

        0x58 => (1, 1, Ld(Reg(E), Reg(B))),
        0x59 => (1, 1, Ld(Reg(E), Reg(C))),
        0x5a => (1, 1, Ld(Reg(E), Reg(D))),
        0x5b => (1, 1, Ld(Reg(E), Reg(E))),
        0x5c => (1, 1, Ld(Reg(E), Reg(H))),
        0x5d => (1, 1, Ld(Reg(E), Reg(L))),
        0x5e => (1, 2, Ld(Reg(E), Mem(Addr::HL))),
        0x5f => (1, 1, Ld(Reg(E), Reg(A))),

        0x60 => (1, 1, Ld(Reg(H), Reg(B))),
        0x61 => (1, 1, Ld(Reg(H), Reg(C))),
        0x62 => (1, 1, Ld(Reg(H), Reg(D))),
        0x63 => (1, 1, Ld(Reg(H), Reg(E))),
        0x64 => (1, 1, Ld(Reg(H), Reg(H))),
        0x65 => (1, 1, Ld(Reg(H), Reg(L))),
        0x66 => (1, 2, Ld(Reg(H), Mem(Addr::HL))),
        0x67 => (1, 1, Ld(Reg(H), Reg(A))),

        0x68 => (1, 1, Ld(Reg(L), Reg(B))),
        0x69 => (1, 1, Ld(Reg(L), Reg(C))),
        0x6a => (1, 1, Ld(Reg(L), Reg(D))),
        0x6b => (1, 1, Ld(Reg(L), Reg(E))),
        0x6c => (1, 1, Ld(Reg(L), Reg(H))),
        0x6d => (1, 1, Ld(Reg(L), Reg(L))),
        0x6e => (1, 2, Ld(Reg(L), Mem(Addr::HL))),
        0x6f => (1, 1, Ld(Reg(L), Reg(A))),

        0x70 => (1, 2, Ld(Mem(Addr::HL), Reg(B))),
        0x71 => (1, 2, Ld(Mem(Addr::HL), Reg(C))),
        0x72 => (1, 2, Ld(Mem(Addr::HL), Reg(D))),
        0x73 => (1, 2, Ld(Mem(Addr::HL), Reg(E))),
        0x74 => (1, 2, Ld(Mem(Addr::HL), Reg(H))),
        0x75 => (1, 2, Ld(Mem(Addr::HL), Reg(L))),
        0x76 => (1, 1, Halt),
        0x77 => (1, 2, Ld(Mem(Addr::HL), Reg(A))),

        0x78 => (1, 1, Ld(Reg(A), Reg(B))),
        0x79 => (1, 1, Ld(Reg(A), Reg(C))),
        0x7a => (1, 1, Ld(Reg(A), Reg(D))),
        0x7b => (1, 1, Ld(Reg(A), Reg(E))),
        0x7c => (1, 1, Ld(Reg(A), Reg(H))),
        0x7d => (1, 1, Ld(Reg(A), Reg(L))),
        0x7e => (1, 2, Ld(Reg(A), Mem(Addr::HL))),
        0x7f => (1, 1, Ld(Reg(A), Reg(A))),

        0x80 => (1, 1, Add(Reg(B))),
        0x81 => (1, 1, Add(Reg(C))),
        0x82 => (1, 1, Add(Reg(D))),
        0x83 => (1, 1, Add(Reg(E))),
        0x84 => (1, 1, Add(Reg(H))),
        0x85 => (1, 1, Add(Reg(L))),
        0x86 => (1, 2, Add(Mem(Addr::HL))),
        0x87 => (1, 1, Add(Reg(A))),

        0x88 => (1, 1, Adc(Reg(B))),
        0x89 => (1, 1, Adc(Reg(C))),
        0x8a => (1, 1, Adc(Reg(D))),
        0x8b => (1, 1, Adc(Reg(E))),
        0x8c => (1, 1, Adc(Reg(H))),
        0x8d => (1, 1, Adc(Reg(L))),
        0x8e => (1, 2, Adc(Mem(Addr::HL))),
        0x8f => (1, 1, Adc(Reg(A))),

        0x90 => (1, 1, Sub(Reg(B))),
        0x91 => (1, 1, Sub(Reg(C))),
        0x92 => (1, 1, Sub(Reg(D))),
        0x93 => (1, 1, Sub(Reg(E))),
        0x94 => (1, 1, Sub(Reg(H))),
        0x95 => (1, 1, Sub(Reg(L))),
        0x96 => (1, 2, Sub(Mem(Addr::HL))),
        0x97 => (1, 1, Sub(Reg(A))),

        0x98 => (1, 1, Sbc(Reg(B))),
        0x99 => (1, 1, Sbc(Reg(C))),
        0x9a => (1, 1, Sbc(Reg(D))),
        0x9b => (1, 1, Sbc(Reg(E))),
        0x9c => (1, 1, Sbc(Reg(H))),
        0x9d => (1, 1, Sbc(Reg(L))),
        0x9e => (1, 2, Sbc(Mem(Addr::HL))),
        0x9f => (1, 1, Sbc(Reg(A))),

        0xa0 => (1, 1, And(Reg(B))),
        0xa1 => (1, 1, And(Reg(C))),
        0xa2 => (1, 1, And(Reg(D))),
        0xa3 => (1, 1, And(Reg(E))),
        0xa4 => (1, 1, And(Reg(H))),
        0xa5 => (1, 1, And(Reg(L))),
        0xa6 => (1, 2, And(Mem(Addr::HL))),
        0xa7 => (1, 1, And(Reg(A))),

        0xa8 => (1, 1, Xor(Reg(B))),
        0xa9 => (1, 1, Xor(Reg(C))),
        0xaa => (1, 1, Xor(Reg(D))),
        0xab => (1, 1, Xor(Reg(E))),
        0xac => (1, 1, Xor(Reg(H))),
        0xad => (1, 1, Xor(Reg(L))),
        0xae => (1, 2, Xor(Mem(Addr::HL))),
        0xaf => (1, 1, Xor(Reg(A))),

        0xb0 => (1, 1, Or(Reg(B))),
        0xb1 => (1, 1, Or(Reg(C))),
        0xb2 => (1, 1, Or(Reg(D))),
        0xb3 => (1, 1, Or(Reg(E))),
        0xb4 => (1, 1, Or(Reg(H))),
        0xb5 => (1, 1, Or(Reg(L))),
        0xb6 => (1, 2, Or(Mem(Addr::HL))),
        0xb7 => (1, 1, Or(Reg(A))),

        0xb8 => (1, 1, Cp(Reg(B))),
        0xb9 => (1, 1, Cp(Reg(C))),
        0xba => (1, 1, Cp(Reg(D))),
        0xbb => (1, 1, Cp(Reg(E))),
        0xbc => (1, 1, Cp(Reg(H))),
        0xbd => (1, 1, Cp(Reg(L))),
        0xbe => (1, 2, Cp(Mem(Addr::HL))),
        0xbf => (1, 1, Cp(Reg(A))),

        0xc0 => (1, 2, Ret(JF::NZ)),
        0xc1 => (1, 3, Pop(BC)),
        0xc2 => (3, 3, Jmp(JF::NZ, imm16)),
        0xc3 => (3, 4, Jmp(JF::Always, imm16)),
        0xc4 => (3, 3, Call(JF::NZ, imm16)),
        0xc5 => (1, 4, Push(BC)),
        0xc6 => (2, 2, Add(Imm(d8))),
        0xc7 => (1, 4, Rst(0x00)),

        0xc8 => (1, 2, Ret(JF::Z)),
        0xc9 => (1, 4, Ret(JF::Always)),
        0xca => (3, 3, Jmp(JF::Z, imm16)),
        0xcb => decode_cb(d8),
        0xcc => (3, 3, Call(JF::Z, imm16)),
        0xcd => (3, 6, Call(JF::Always, imm16)),
        0xce => (2, 2, Adc(Imm(d8))),
        0xcf => (1, 4, Rst(0x08)),

        0xd0 => (1, 2, Ret(JF::NC)),
        0xd1 => (1, 3, Pop(DE)),
        0xd2 => (3, 3, Jmp(JF::NC, imm16)),
        0xd4 => (3, 3, Call(JF::NC, imm16)),
        0xd5 => (1, 4, Push(DE)),
        0xd6 => (2, 2, Sub(Imm(d8))),
        0xd7 => (1, 4, Rst(0x10)),

        0xd8 => (1, 2, Ret(JF::C)),
        0xd9 => (1, 4, Reti),
        0xda => (3, 3, Jmp(JF::C, imm16)),
        0xdc => (3, 3, Call(JF::C, imm16)),
        0xde => (2, 2, Sbc(Imm(d8))),
        0xdf => (1, 4, Rst(0x18)),

        0xe0 => (2, 3, Ld(Mem(Addr::FF(d8)), Reg(A))),
        0xe1 => (1, 3, Pop(HL)),
        0xe2 => (1, 2, Ld(Mem(Addr::FF_C), Reg (A))),
        0xe5 => (1, 4, Push(HL)),
        0xe6 => (2, 2, And(Imm(d8))),
        0xe7 => (1, 4, Rst(0x20)),

        0xe8 => (2, 4, AddSp(r8)),
        0xe9 => (1, 1, JmpHl),
        0xea => (3, 4, Ld(Mem(Addr::Imm(imm16)), Reg(A))),
        0xee => (2, 2, Xor(Imm(d8))),
        0xef => (1, 4, Rst(0x28)),

        0xf0 => (2, 3, Ld(Reg(A), Mem(Addr::FF(d8)))),
        0xf1 => (1, 3, Pop(AF)),
        0xf2 => (1, 2, Ld(Reg(A), Mem(Addr::FF_C))),
        0xf3 => (1, 1, Di),
        0xf5 => (1, 4, Push(AF)),
        0xf6 => (2, 2, Or(Imm(d8))),
        0xf7 => (1, 4, Rst(0x30)),

        0xf8 => (2, 3, LdHlSp(r8)),
        0xf9 => (1, 2, LdSpHl),
        0xfa => (3, 4, Ld(Reg(A), Mem(Addr::Imm(imm16)))),
        0xfb => (1, 1, Ei),
        0xfe => (2, 2, Cp(Imm(d8))),
        0xff => (1, 4, Rst(0x38)),

        _ => (0, 0, Undefined(op))
    }
}

fn decode_cb(op: u8) -> (u8, u8, Opcode) {
    match op {
        0x00 => (2, 2, Rlc(Reg(B))),
        0x01 => (2, 2, Rlc(Reg(C))),
        0x02 => (2, 2, Rlc(Reg(D))),
        0x03 => (2, 2, Rlc(Reg(E))),
        0x04 => (2, 2, Rlc(Reg(H))),
        0x05 => (2, 2, Rlc(Reg(L))),
        0x06 => (2, 4, Rlc(Mem(Addr::HL))),
        0x07 => (2, 2, Rlc(Reg(A))),

        0x08 => (2, 2, Rrc(Reg(B))),
        0x09 => (2, 2, Rrc(Reg(C))),
        0x0a => (2, 2, Rrc(Reg(D))),
        0x0b => (2, 2, Rrc(Reg(E))),
        0x0c => (2, 2, Rrc(Reg(H))),
        0x0d => (2, 2, Rrc(Reg(L))),
        0x0e => (2, 4, Rrc(Mem(Addr::HL))),
        0x0f => (2, 2, Rrc(Reg(A))),

        0x10 => (2, 2, Rl(Reg(B))),
        0x11 => (2, 2, Rl(Reg(C))),
        0x12 => (2, 2, Rl(Reg(D))),
        0x13 => (2, 2, Rl(Reg(E))),
        0x14 => (2, 2, Rl(Reg(H))),
        0x15 => (2, 2, Rl(Reg(L))),
        0x16 => (2, 4, Rl(Mem(Addr::HL))),
        0x17 => (2, 2, Rl(Reg(A))),

        0x18 => (2, 2, Rr(Reg(B))),
        0x19 => (2, 2, Rr(Reg(C))),
        0x1a => (2, 2, Rr(Reg(D))),
        0x1b => (2, 2, Rr(Reg(E))),
        0x1c => (2, 2, Rr(Reg(H))),
        0x1d => (2, 2, Rr(Reg(L))),
        0x1e => (2, 4, Rr(Mem(Addr::HL))),
        0x1f => (2, 2, Rr(Reg(A))),

        0x20 => (2, 2, Sla(Reg(B))),
        0x21 => (2, 2, Sla(Reg(C))),
        0x22 => (2, 2, Sla(Reg(D))),
        0x23 => (2, 2, Sla(Reg(E))),
        0x24 => (2, 2, Sla(Reg(H))),
        0x25 => (2, 2, Sla(Reg(L))),
        0x26 => (2, 4, Sla(Mem(Addr::HL))),
        0x27 => (2, 2, Sla(Reg(A))),

        0x28 => (2, 2, Sra(Reg(B))),
        0x29 => (2, 2, Sra(Reg(C))),
        0x2a => (2, 2, Sra(Reg(D))),
        0x2b => (2, 2, Sra(Reg(E))),
        0x2c => (2, 2, Sra(Reg(H))),
        0x2d => (2, 2, Sra(Reg(L))),
        0x2e => (2, 4, Sra(Mem(Addr::HL))),
        0x2f => (2, 2, Sra(Reg(A))),

        0x30 => (2, 2, Swap(Reg(B))),
        0x31 => (2, 2, Swap(Reg(C))),
        0x32 => (2, 2, Swap(Reg(D))),
        0x33 => (2, 2, Swap(Reg(E))),
        0x34 => (2, 2, Swap(Reg(H))),
        0x35 => (2, 2, Swap(Reg(L))),
        0x36 => (2, 4, Swap(Mem(Addr::HL))),
        0x37 => (2, 2, Swap(Reg(A))),

        0x38 => (2, 2, Srl(Reg(B))),
        0x39 => (2, 2, Srl(Reg(C))),
        0x3a => (2, 2, Srl(Reg(D))),
        0x3b => (2, 2, Srl(Reg(E))),
        0x3c => (2, 2, Srl(Reg(H))),
        0x3d => (2, 2, Srl(Reg(L))),
        0x3e => (2, 4, Srl(Mem(Addr::HL))),
        0x3f => (2, 2, Srl(Reg(A))),

        0x40 => (2, 2, Bit(0, Reg(B))),
        0x41 => (2, 2, Bit(0, Reg(C))),
        0x42 => (2, 2, Bit(0, Reg(D))),
        0x43 => (2, 2, Bit(0, Reg(E))),
        0x44 => (2, 2, Bit(0, Reg(H))),
        0x45 => (2, 2, Bit(0, Reg(L))),
        0x46 => (2, 4, Bit(0, Mem(Addr::HL))),
        0x47 => (2, 2, Bit(0, Reg(A))),

        0x48 => (2, 2, Bit(1, Reg(B))),
        0x49 => (2, 2, Bit(1, Reg(C))),
        0x4a => (2, 2, Bit(1, Reg(D))),
        0x4b => (2, 2, Bit(1, Reg(E))),
        0x4c => (2, 2, Bit(1, Reg(H))),
        0x4d => (2, 2, Bit(1, Reg(L))),
        0x4e => (2, 4, Bit(1, Mem(Addr::HL))),
        0x4f => (2, 2, Bit(1, Reg(A))),

        0x50 => (2, 2, Bit(2, Reg(B))),
        0x51 => (2, 2, Bit(2, Reg(C))),
        0x52 => (2, 2, Bit(2, Reg(D))),
        0x53 => (2, 2, Bit(2, Reg(E))),
        0x54 => (2, 2, Bit(2, Reg(H))),
        0x55 => (2, 2, Bit(2, Reg(L))),
        0x56 => (2, 4, Bit(2, Mem(Addr::HL))),
        0x57 => (2, 2, Bit(2, Reg(A))),

        0x58 => (2, 2, Bit(3, Reg(B))),
        0x59 => (2, 2, Bit(3, Reg(C))),
        0x5a => (2, 2, Bit(3, Reg(D))),
        0x5b => (2, 2, Bit(3, Reg(E))),
        0x5c => (2, 2, Bit(3, Reg(H))),
        0x5d => (2, 2, Bit(3, Reg(L))),
        0x5e => (2, 4, Bit(3, Mem(Addr::HL))),
        0x5f => (2, 2, Bit(3, Reg(A))),

        0x60 => (2, 2, Bit(4, Reg(B))),
        0x61 => (2, 2, Bit(4, Reg(C))),
        0x62 => (2, 2, Bit(4, Reg(D))),
        0x63 => (2, 2, Bit(4, Reg(E))),
        0x64 => (2, 2, Bit(4, Reg(H))),
        0x65 => (2, 2, Bit(4, Reg(L))),
        0x66 => (2, 4, Bit(4, Mem(Addr::HL))),
        0x67 => (2, 2, Bit(4, Reg(A))),

        0x68 => (2, 2, Bit(5, Reg(B))),
        0x69 => (2, 2, Bit(5, Reg(C))),
        0x6a => (2, 2, Bit(5, Reg(D))),
        0x6b => (2, 2, Bit(5, Reg(E))),
        0x6c => (2, 2, Bit(5, Reg(H))),
        0x6d => (2, 2, Bit(5, Reg(L))),
        0x6e => (2, 4, Bit(5, Mem(Addr::HL))),
        0x6f => (2, 2, Bit(5, Reg(A))),

        0x70 => (2, 2, Bit(6, Reg(B))),
        0x71 => (2, 2, Bit(6, Reg(C))),
        0x72 => (2, 2, Bit(6, Reg(D))),
        0x73 => (2, 2, Bit(6, Reg(E))),
        0x74 => (2, 2, Bit(6, Reg(H))),
        0x75 => (2, 2, Bit(6, Reg(L))),
        0x76 => (2, 4, Bit(6, Mem(Addr::HL))),
        0x77 => (2, 2, Bit(6, Reg(A))),

        0x78 => (2, 2, Bit(7, Reg(B))),
        0x79 => (2, 2, Bit(7, Reg(C))),
        0x7a => (2, 2, Bit(7, Reg(D))),
        0x7b => (2, 2, Bit(7, Reg(E))),
        0x7c => (2, 2, Bit(7, Reg(H))),
        0x7d => (2, 2, Bit(7, Reg(L))),
        0x7e => (2, 4, Bit(7, Mem(Addr::HL))),
        0x7f => (2, 2, Bit(7, Reg(A))),

        0x80 => (2, 2, Res(0, Reg(B))),
        0x81 => (2, 2, Res(0, Reg(C))),
        0x82 => (2, 2, Res(0, Reg(D))),
        0x83 => (2, 2, Res(0, Reg(E))),
        0x84 => (2, 2, Res(0, Reg(H))),
        0x85 => (2, 2, Res(0, Reg(L))),
        0x86 => (2, 4, Res(0, Mem(Addr::HL))),
        0x87 => (2, 2, Res(0, Reg(A))),

        0x88 => (2, 2, Res(1, Reg(B))),
        0x89 => (2, 2, Res(1, Reg(C))),
        0x8a => (2, 2, Res(1, Reg(D))),
        0x8b => (2, 2, Res(1, Reg(E))),
        0x8c => (2, 2, Res(1, Reg(H))),
        0x8d => (2, 2, Res(1, Reg(L))),
        0x8e => (2, 4, Res(1, Mem(Addr::HL))),
        0x8f => (2, 2, Res(1, Reg(A))),

        0x90 => (2, 2, Res(2, Reg(B))),
        0x91 => (2, 2, Res(2, Reg(C))),
        0x92 => (2, 2, Res(2, Reg(D))),
        0x93 => (2, 2, Res(2, Reg(E))),
        0x94 => (2, 2, Res(2, Reg(H))),
        0x95 => (2, 2, Res(2, Reg(L))),
        0x96 => (2, 4, Res(2, Mem(Addr::HL))),
        0x97 => (2, 2, Res(2, Reg(A))),

        0x98 => (2, 2, Res(3, Reg(B))),
        0x99 => (2, 2, Res(3, Reg(C))),
        0x9a => (2, 2, Res(3, Reg(D))),
        0x9b => (2, 2, Res(3, Reg(E))),
        0x9c => (2, 2, Res(3, Reg(H))),
        0x9d => (2, 2, Res(3, Reg(L))),
        0x9e => (2, 4, Res(3, Mem(Addr::HL))),
        0x9f => (2, 2, Res(3, Reg(A))),

        0xa0 => (2, 2, Res(4, Reg(B))),
        0xa1 => (2, 2, Res(4, Reg(C))),
        0xa2 => (2, 2, Res(4, Reg(D))),
        0xa3 => (2, 2, Res(4, Reg(E))),
        0xa4 => (2, 2, Res(4, Reg(H))),
        0xa5 => (2, 2, Res(4, Reg(L))),
        0xa6 => (2, 4, Res(4, Mem(Addr::HL))),
        0xa7 => (2, 2, Res(4, Reg(A))),

        0xa8 => (2, 2, Res(5, Reg(B))),
        0xa9 => (2, 2, Res(5, Reg(C))),
        0xaa => (2, 2, Res(5, Reg(D))),
        0xab => (2, 2, Res(5, Reg(E))),
        0xac => (2, 2, Res(5, Reg(H))),
        0xad => (2, 2, Res(5, Reg(L))),
        0xae => (2, 4, Res(5, Mem(Addr::HL))),
        0xaf => (2, 2, Res(5, Reg(A))),

        0xb0 => (2, 2, Res(6, Reg(B))),
        0xb1 => (2, 2, Res(6, Reg(C))),
        0xb2 => (2, 2, Res(6, Reg(D))),
        0xb3 => (2, 2, Res(6, Reg(E))),
        0xb4 => (2, 2, Res(6, Reg(H))),
        0xb5 => (2, 2, Res(6, Reg(L))),
        0xb6 => (2, 4, Res(6, Mem(Addr::HL))),
        0xb7 => (2, 2, Res(6, Reg(A))),

        0xb8 => (2, 2, Res(7, Reg(B))),
        0xb9 => (2, 2, Res(7, Reg(C))),
        0xba => (2, 2, Res(7, Reg(D))),
        0xbb => (2, 2, Res(7, Reg(E))),
        0xbc => (2, 2, Res(7, Reg(H))),
        0xbd => (2, 2, Res(7, Reg(L))),
        0xbe => (2, 4, Res(7, Mem(Addr::HL))),
        0xbf => (2, 2, Res(7, Reg(A))),

        0xc0 => (2, 2, Set(0, Reg(B))),
        0xc1 => (2, 2, Set(0, Reg(C))),
        0xc2 => (2, 2, Set(0, Reg(D))),
        0xc3 => (2, 2, Set(0, Reg(E))),
        0xc4 => (2, 2, Set(0, Reg(H))),
        0xc5 => (2, 2, Set(0, Reg(L))),
        0xc6 => (2, 4, Set(0, Mem(Addr::HL))),
        0xc7 => (2, 2, Set(0, Reg(A))),

        0xc8 => (2, 2, Set(1, Reg(B))),
        0xc9 => (2, 2, Set(1, Reg(C))),
        0xca => (2, 2, Set(1, Reg(D))),
        0xcb => (2, 2, Set(1, Reg(E))),
        0xcc => (2, 2, Set(1, Reg(H))),
        0xcd => (2, 2, Set(1, Reg(L))),
        0xce => (2, 4, Set(1, Mem(Addr::HL))),
        0xcf => (2, 2, Set(1, Reg(A))),

        0xd0 => (2, 2, Set(2, Reg(B))),
        0xd1 => (2, 2, Set(2, Reg(C))),
        0xd2 => (2, 2, Set(2, Reg(D))),
        0xd3 => (2, 2, Set(2, Reg(E))),
        0xd4 => (2, 2, Set(2, Reg(H))),
        0xd5 => (2, 2, Set(2, Reg(L))),
        0xd6 => (2, 4, Set(2, Mem(Addr::HL))),
        0xd7 => (2, 2, Set(2, Reg(A))),

        0xd8 => (2, 2, Set(3, Reg(B))),
        0xd9 => (2, 2, Set(3, Reg(C))),
        0xda => (2, 2, Set(3, Reg(D))),
        0xdb => (2, 2, Set(3, Reg(E))),
        0xdc => (2, 2, Set(3, Reg(H))),
        0xdd => (2, 2, Set(3, Reg(L))),
        0xde => (2, 4, Set(3, Mem(Addr::HL))),
        0xdf => (2, 2, Set(3, Reg(A))),

        0xe0 => (2, 2, Set(4, Reg(B))),
        0xe1 => (2, 2, Set(4, Reg(C))),
        0xe2 => (2, 2, Set(4, Reg(D))),
        0xe3 => (2, 2, Set(4, Reg(E))),
        0xe4 => (2, 2, Set(4, Reg(H))),
        0xe5 => (2, 2, Set(4, Reg(L))),
        0xe6 => (2, 4, Set(4, Mem(Addr::HL))),
        0xe7 => (2, 2, Set(4, Reg(A))),

        0xe8 => (2, 2, Set(5, Reg(B))),
        0xe9 => (2, 2, Set(5, Reg(C))),
        0xea => (2, 2, Set(5, Reg(D))),
        0xeb => (2, 2, Set(5, Reg(E))),
        0xec => (2, 2, Set(5, Reg(H))),
        0xed => (2, 2, Set(5, Reg(L))),
        0xee => (2, 4, Set(5, Mem(Addr::HL))),
        0xef => (2, 2, Set(5, Reg(A))),

        0xf0 => (2, 2, Set(6, Reg(B))),
        0xf1 => (2, 2, Set(6, Reg(C))),
        0xf2 => (2, 2, Set(6, Reg(D))),
        0xf3 => (2, 2, Set(6, Reg(E))),
        0xf4 => (2, 2, Set(6, Reg(H))),
        0xf5 => (2, 2, Set(6, Reg(L))),
        0xf6 => (2, 4, Set(6, Mem(Addr::HL))),
        0xf7 => (2, 2, Set(6, Reg(A))),

        0xf8 => (2, 2, Set(7, Reg(B))),
        0xf9 => (2, 2, Set(7, Reg(C))),
        0xfa => (2, 2, Set(7, Reg(D))),
        0xfb => (2, 2, Set(7, Reg(E))),
        0xfc => (2, 2, Set(7, Reg(H))),
        0xfd => (2, 2, Set(7, Reg(L))),
        0xfe => (2, 4, Set(7, Mem(Addr::HL))),
        0xff => (2, 2, Set(7, Reg(A))),

        _ => unreachable!()
    }
}
